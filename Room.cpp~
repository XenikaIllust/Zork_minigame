#include "Room.h"

//Room::Room(string roomName, string roomDescription, xml_node<>* curr_node){
//	name = roomName;
//	description = roomDescription;

//	while(border->next_sibling() != NULL){
//		setBorder(curr_node.first_node("border")->first_node("direction")->value, curr_node.first_node("border")->first_node("name")->value);
//		curr_node = curr_node->next_sibling();
//	}
//}

Room::Room(xml_node<>* newRoom){
  if(newRoom != nullptr) {
    if(newRoom->first_node("name") != nullptr)
      this->name = newRoom->first_node("name")->value();
    else
      this->name = "";

    if(newRoom->first_node("description") != nullptr) 
      this->description = roomDescription;
    else
      this->description = "";

    if(newRoom->first_node("border") != nullptr) {
      xml_node<>* border_node = newRoom->first_node("border");
      this->setBorder(border_node);
    }
  }
}

void Room::setBorder(string dir, string newName){

	switch(dir){
		case "north":
			this->north = new this->Border(dir, newName);
			break;
		case "south":
			this->south = new this->Border(dir, newName);
			break;
		case "west":
			this->west = new this->Border(dir, newName);
			break;
		case "east":
			this->east = new this->Border(dir, newName);
			break;
	}

return;
}

void Room::setType(string newType){
	type = newType;
return;
}

string Room::getRoomName(){
	return this->name;
}

string Room::getRoomDesciption(){
	return this->description;
}

string Room::getType(){
	return this->type;
}
